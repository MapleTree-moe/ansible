###
### mapletree.moe - system configuration management
### common role - configure system settings common to all devices
###
---
# disable cloud-init after first boot configuration
- name: COMMON | CLOUD-INIT | Create file disabling cloud-init
  ansible.builtin.file:
    path: /etc/cloud/cloud-init.disabled
    state: touch
    owner: root
    group: root
    mode: "0644"

# set servers to use dhcp and static dns servers through networkmanager
- name: COMMON | NETWORK | Enable DHCP and set static DNS servers
  vars:
    network_provider: nm
    network_state:
      interfaces:
        - name: "{{ ansible_default_ipv4.interface }}"
          type: ethernet
          state: up
          ipv4:
            enabled: true
            auto-dns: false
            auto-gateway: true
            auto-routes: true
            dhcp: true
          ipv6:
            enabled: false # FIXME: enable ipv6
            auto-dns: false
            auto-gateway: false
            auto-routes: false
            autoconf: false
            dhcp: false
      dns-resolver:
        config:
          server:
            - 1.1.1.1
            - 1.0.0.1
  ansible.builtin.include_role:
    name: fedora.linux_system_roles.network

# FIXME: this is an ugly hack because we don't have ipv6
- name: COMMON | NETWORK | Remove ipv6 localhost from /etc/hosts
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: ^::1
    state: absent

# install base packages and enable automated security updates
- name: COMMON | PACKAGES | Install standard packages
  ansible.builtin.package:
    name:
      - dnf-automatic
      - dnf-utils
      - git
      - tmux
    state: present
    update_cache: true
- name: COMMON | PACKAGES | Configure automatic updates
  ansible.builtin.lineinfile:
    path: /etc/dnf/automatic.conf
    regexp: '^{{ item.name }}'
    line: '{{ item.name }} = {{ item.value }}'
  with_items:
    - name: upgrade_type
      value: security
    - name: download_updates
      value: 'yes'
    - name: apply_updates
      value: 'yes'
    - name: reboot
      value: 'when-needed'
- name: COMMON | PACKAGES | Enable automatic security updates
  ansible.builtin.service:
    name: dnf-automatic.timer
    state: started
    enabled: true

# configure system tuning daemon based on system type
- name: COMMON | TUNED | Set tuned to 'virtual-guest' on virtual systems
  vars:
    tuned_active_builtin_profile: "virtual-guest"
  ansible.builtin.include_role:
    name: giovtorres.tuned
  when: ansible_virtualization_role == "guest"
- name: COMMON | TUNED | Set tuned to 'throughput-performance' on bare metal
  vars:
    tuned_active_builtin_profile: "virtual-guest"
  ansible.builtin.include_role:
    name: giovtorres.tuned
  when: ansible_virtualization_role != "guest"

# configure standard users and groups
- name: COMMON | GROUPS | Ensure group 'admin' - GID '1001' exists
  ansible.builtin.group:
    name: admin
    gid: 1001
    state: present
- name: COMMON | GROUPS | Ensure group 'podman' - GID '1000' exists
  ansible.builtin.group:
    name: podman
    gid: 1000
    state: present
- name: COMMON | GROUPS | Ensure group 'users' - GID '100' exists
  ansible.builtin.group:
    name: users
    gid: 100
    state: present
- name: COMMON | GROUPS | Ensure group 'wheel' - GID '10' exists
  ansible.builtin.group:
    name: wheel
    gid: 10
    state: present
- name: COMMON | USERS | Ensure user "admin" - UID '1001' - locked exists
  ansible.builtin.user:
    name: admin
    comment: Mapletree.moe Administrator
    uid: 1001
    group: admin
    password_lock: true
    groups: admin,users,wheel
    state: present
- name: COMMON | USERS | Ensure user "podman" - UID '1000' - locked exists
  ansible.builtin.user:
    name: podman
    comment: Mapletree.moe Container User
    uid: 1000
    group: podman
    password_lock: true
    groups: podman,users
    state: present
- name: COMMON | USERS | Ensure user "root" is locked to prevent login
  ansible.builtin.user:
    name: root
    password_lock: true
- name: COMMON | USERS | ADMIN | Set up ssh authorized_keys
  ansible.posix.authorized_key:
    user: admin
    state: present
    key: '{{ item }}'
  with_items: "{{ admin_authorized_keys }}"
- name: COMMON | USERS | PODMAN | Set up ssh authorized_keys
  ansible.posix.authorized_key:
    user: admin
    state: present
    key: '{{ item }}'
  with_items: "{{ podman_authorized_keys }}"
- name: COMMON | USERS | PODMAN | Enable systemd linger for user
  ansible.builtin.command:
    cmd: "loginctl enable-linger podman"
    creates: "/var/lib/systemd/linger/podman"
- name: CONFIGURE | USERS | PODMAN | Generate subuids
  vars:
    subid_users: # noqa var-naming
      - podman
  ansible.builtin.include_role:
    name: subuid_subgid
# FIXME: use a handler
- name: COMMON | USERS | Reboot the server to apply lingering
  ansible.builtin.reboot:
    reboot_timeout: 600
