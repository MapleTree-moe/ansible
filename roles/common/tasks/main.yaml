###
### mapletree.moe - system configuration management
### common role - configure system settings common to all devices
###
---
# disable cloud-init after first boot configuration
- name: CLOUD-INIT | Create file disabling cloud-init
  ansible.builtin.file:
    path: /etc/cloud/cloud-init.disabled
    state: touch
    owner: root
    group: root
    mode: "0644"

# set servers to use dhcp and static dns servers through networkmanager
- name: NETWORK | Enable DHCP and set static DNS servers
  vars:
    network_provider: nm
    network_state:
      interfaces:
        - name: "{{ ansible_default_ipv4.interface }}"
          type: ethernet
          state: up
          ipv4:
            enabled: true
            auto-dns: false
            auto-gateway: true
            auto-routes: true
            dhcp: true
          ipv6:
            enabled: false # FIXME: enable ipv6
            auto-dns: false
            auto-gateway: false
            auto-routes: false
            autoconf: false
            dhcp: false
      dns-resolver:
        config:
          server:
            - 1.1.1.1
            - 1.0.0.1
  ansible.builtin.include_role:
    name: fedora.linux_system_roles.network

# FIXME: this is an ugly hack because we don't have ipv6
- name: NETWORK | Remove ipv6 localhost from /etc/hosts
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: ^::1
    state: absent

# install base packages and enable automated security updates
- name: PACKAGES | Install standard packages
  ansible.builtin.package:
    name:
      - "{{ common_relay_sasl }}" # include postfix auth pkg in pkg installation
      - dnf-automatic
      - dnf-utils
      - git
      - tmux
    state: present
    update_cache: true
- name: PACKAGES | Configure automatic updates
  ansible.builtin.lineinfile:
    path: /etc/dnf/automatic.conf
    regexp: '^{{ item.name }}'
    line: '{{ item.name }} = {{ item.value }}'
  with_items:
    - name: upgrade_type
      value: security
    - name: download_updates
      value: 'yes'
    - name: apply_updates
      value: 'yes'
    - name: reboot
      value: 'when-needed'
- name: PACKAGES | Enable automatic security updates
  ansible.builtin.service:
    name: dnf-automatic.timer
    state: started
    enabled: true

# configure postfix to act as a null relay
- name: POSTFIX | Install & Configure Postfix
  vars:
    postfix_conf:
      # NOTE: these may need to be changed according to relayhost requirements
      inet_interfaces: "loopback-only" # do not allow external connections
      inet_protocols: "ipv4" # FIXME: enable ipv6
      mydestination: "" # null configuration, handle routing with virtual maps
      relayhost: "[{{ common_relay_host }}]:{{ common_relay_port }}"
      sender_canonical_classes: "envelope_sender, header_sender"
      sender_canonical_maps: "regexp:/etc/postfix/sender_canonical_maps"
      smtp_header_checks: "regexp:/etc/postfix/smtp_header_checks"
      smtp_sasl_auth_enable: "yes"
      smtp_sasl_password_maps: "hash:/etc/postfix/sasl_passwd"
      smtp_sasl_security_options: "noanonymous"
      smtp_sasl_tls_security_options: "noanonymous"
      smtp_tls_policy_maps: "hash:/etc/postfix/tls_policy"
      smtp_use_tls: "yes"
      smtpd_client_restrictions: "permit_mynetworks,reject"
      virtual_maps: "regexp:/etc/postfix/virtual_regexp"
    postfix_files:
      - name: sasl_passwd
        # yamllint disable-line rule:line-length
        content: "[{{ common_relay_host }}]:{{ common_relay_port }} {{ common_relay_user }}:{{ common_relay_pass }}"
        postmap: true
      - name: sender_canonical_maps
        # rewrites sender address to allow for mail to pass through relayhost
        content: "/.+/ {{ ansible_hostname }}@{{ ansible_domain }}"
      - name: smtp_header_checks
        # rewrites headers to make mail appear to genuinely be from sender addr
        # yamllint disable-line rule:line-length
        content: "/^From:.*/ REPLACE From: {{ ansible_hostname }}@{{ ansible_domain }}"
      - name: tls_policy
        # yamllint disable-line rule:line-length
        content: "[{{ common_relay_host }}]:{{ common_relay_port }} {{ common_relay_tls }}"
        postmap: true
      - name: virtual_regexp
        # rewrite the "TO:" address of all emails to point towards administrator
        content: "/.+@.+/ admin@{{ ansible_domain }}"
  ansible.builtin.include_role:
    name: fedora.linux_system_roles.postfix

# connect system to redhat, verify license, and install insights
- name: REDHAT | Authenticate system with Redhat, Enable Insights
  vars:
    rhc_auth:
      activation_keys:
        keys:
          - "{{ common_redhat_key }}"
    rhc_organization: "{{ common_redhat_org }}"
    rhc_insights:
      state: present
      remediation: absent
  ansible.builtin.include_role:
    name: fedora.linux_system_roles.rhc
  when: common_redhat_enabled

# configure system tuning daemon based on system type
- name: TUNED | Set tuned to 'virtual-guest' on virtual systems
  vars:
    tuned_active_builtin_profile: "virtual-guest"
  ansible.builtin.include_role:
    name: giovtorres.tuned
  when: ansible_virtualization_role == "guest"
- name: COMMON | TUNED | Set tuned to 'throughput-performance' on bare metal
  vars:
    tuned_active_builtin_profile: "virtual-guest"
  ansible.builtin.include_role:
    name: giovtorres.tuned
  when: ansible_virtualization_role != "guest"

# configure standard users and groups
- name: GROUPS | Ensure group 'admin' - GID '1001' exists
  ansible.builtin.group:
    name: admin
    gid: 1001
    state: present
- name: GROUPS | Ensure group 'podman' - GID '1000' exists
  ansible.builtin.group:
    name: podman
    gid: 1000
    state: present
- name: GROUPS | Ensure group 'users' - GID '100' exists
  ansible.builtin.group:
    name: users
    gid: 100
    state: present
- name: GROUPS | Ensure group 'wheel' - GID '10' exists
  ansible.builtin.group:
    name: wheel
    gid: 10
    state: present
- name: USERS | Ensure user "admin" - UID '1001' - locked exists
  ansible.builtin.user:
    name: admin
    comment: Mapletree.moe Administrator
    uid: 1001
    group: admin
    password_lock: true
    groups: admin,users,wheel
    state: present
- name: USERS | Ensure user "podman" - UID '1000' - locked exists
  ansible.builtin.user:
    name: podman
    comment: Mapletree.moe Container User
    uid: 1000
    group: podman
    password_lock: true
    groups: podman,users
    state: present
- name: USERS | Ensure user "root" is locked to prevent login
  ansible.builtin.user:
    name: root
    password_lock: true
- name: USERS | ADMIN | Set up ssh authorized_keys
  ansible.posix.authorized_key:
    user: admin
    state: present
    key: '{{ item }}'
  with_items: "{{ common_admin_authorized_keys }}"
- name: USERS | PODMAN | Set up ssh authorized_keys
  ansible.posix.authorized_key:
    user: admin
    state: present
    key: '{{ item }}'
  with_items: "{{ common_podman_authorized_keys }}"
