# code: language=ansible

###
### mapletree.moe - system configuration management
### containers role - setup podman on target systems
###
---
# TODOs: automated database backups
#        automatic dependency resolution
#        low priority - create local vault with secrets
- name: PODMAN SOCKET | Check if podman socket is required for target host
  # SECURITY: a podman socket proxy could be useful to boost security
  ansible.builtin.set_fact:
    podman_socket_required: true
  # TODO: this is just traefik for now, but it would be nice to check multiple
  #       services against `containers_services_enabled`
  # URGENT TODO: without traefik the code will fail because the fact is never
  #              at all. we need some way to set it to false when this fails
  when: '"traefik" in containers_services_enabled'

- name: PACKAGES | Install packages
  ansible.builtin.package:
    name:
      - container-tools
    state: present
    update_cache: true

# TODO: we should implement this ourselves. the current role fails if you remove
#       ansible variable injection, and we should also try to keep the podman
#       user on a static group of subuids and subgids
- name: USERS | Configure subuid and subgid for podman user
  # podman is installed after the user is created in the `common` role so we
  # need to manually set subuid and subgid
  # https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/building_running_and_managing_containers/assembly_starting-with-containers_building-running-and-managing-containers
  vars:
    subid_users: # noqa var-naming
      - podman
  ansible.builtin.include_role:
    # https://github.com/rwxd/ansible-role-subuid_subgid
    name: subuid_subgid

# using containers with SELinux requires additional policy options to be enabled
- name: SELINUX | Configure SELinux
  block:
    - name: SELINUX | POLICY | Install SELinux policy modules
      vars:
        selinux_modules:
          # TODO: these two modules are actually udica templates. we should
          #       figure out how to use these templates directly on the host.
          - path: selinux/base_container.cil
            state: enabled
          - path: selinux/net_container.cil
            state: enabled
      ansible.builtin.include_role:
        # https://galaxy.ansible.com/ui/repo/published/fedora/linux_system_roles/docs/README_selinux/
        name: fedora.linux_system_roles.selinux

    - name: SELINUX | POLICY | Flush SELinux handlers
      ansible.builtin.meta: flush_handlers

- name: SYSTEMD | Configure SystemD
  block:
    - name: SYSTEMD | PODMAN SOCKET | Install podman.sock if required
      when: podman_socket_required
      vars:
        systemd_enabled_units:
          - item: podman.socket
            user: podman
        systemd_started_units:
          - item: podman.socket
            user: podman
      ansible.builtin.include_role:
        # https://galaxy.ansible.com/ui/repo/published/fedora/linux_system_roles/docs/README_systemd/
        name: fedora.linux_system_roles.systemd

    # because systemD doesn't allow user units to interact with system units, we
    # can't use `network-online.target` for podman, so we make our own
    # https://access.redhat.com/solutions/7004860
    # UPGRADE: this isn't needed in v5.3
    - name: SYSTEMD | NETWORK | Install podman-user-wait-network-online.service
      vars:
        systemd_enabled_units:
          - item: podman-user-wait-network-online.service
            user: podman
        systemd_started_units:
          - item: podman-user-wait-network-online.service
            user: podman
        systemd_unit_file_templates:
          - item: podman-user-wait-network-online.service.j2
            user: podman
            state: present
      ansible.builtin.include_role:
        # https://galaxy.ansible.com/ui/repo/published/fedora/linux_system_roles/docs/README_systemd/
        name: fedora.linux_system_roles.systemd

    - name: SYSTEMD | Flush systemd handlers
      ansible.builtin.meta: flush_handlers

# TODO: it would be nice to one day have every container network isolated except
#       for the services it needs. it seems like this would be expensive on
#       podman, maybe this is a use for consul?
# SECURITY TODO: podman by default stores secrets unencrypted in a file, just
#                encoded. we should transition to either gpg or a proper secrets
#                store.
- name: NETWORKS | Install the standard networks used by containers
  block:
    - name: NETWORKS | PODMAN | Install the container networks
      vars:
        podman_containers_conf:
          containers:
            # FIXME: linux-system-roles/podman #208 PR #209
            # container_name_as_hostname: true
            # log_driver: journald
            mounts: []
            tz: "{{ ansible_facts['date_time']['tz'] }}"
          engine:
            events_logger: journald
            # FIXME: linux-system-roles/podman #208 PR #209
            # healthcheck_events: false
            # pull_policy: missing
          # FIXME: this somehow breaks our sockets for traefik. why? how??
          # network:
          #   default_rootless_network_cmd: pasta
          #   network_backend: netavark
        podman_fail_if_too_old: true
        podman_prune_images: true
        podman_pull_image: true
        podman_quadlet_specs:
          - template_src: backend.network.j2
          - template_src: frontend.network.j2
        podman_run_as_user: podman
        podman_run_as_group: podman
        podman_storage_conf:
          storage:
            driver: overlay
        podman_validate_certs: true
      ansible.builtin.include_role:
        # https://galaxy.ansible.com/ui/repo/published/fedora/linux_system_roles/docs/README_podman/
        name: fedora.linux_system_roles.podman

    - name: NETWORKS | PODMAN | Flush podman handlers
      ansible.builtin.meta: flush_handlers

- name: SERVICES | Install and configure enabled containers
  ansible.builtin.include_tasks:
    file: "{{ service_name }}.yaml"
  loop: "{{ containers_services_enabled }}"
  loop_control:
    loop_var: service_name
